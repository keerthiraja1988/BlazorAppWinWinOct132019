
@page "/Login"

@using FluentValidation.Resources
@using ResourceModel.Authentication
@using ClientWebAppBlazor.Pages.Login
@inject ILocalStorageService _localStorage


@inherits LoginBase



@code {
    JwtToken JwtToken = new JwtToken();

    protected override async Task OnInitializedAsync()
    {
        string loggedOutSuccessfully = await _localStorage.GetItemAsync<string>("loggedOutSuccessfully");

        if (!string.IsNullOrEmpty(loggedOutSuccessfully) && loggedOutSuccessfully == "true")
        {
            await JsRuntime.InvokeVoidAsync("homeController.loggedOutSuccessfully", "");
            await _localStorage.RemoveItemAsync("loggedOutSuccessfully");
        }
    }
}

<NavBar JwtToken="@JwtToken" ActivateNav="navItemLogin">
</NavBar>
<div class='container-fluid pt-1'>

    <div class="row">
        <div class="col-md-4">

        </div>

        <div class="col-md-4">
            <EditForm Model="@ClientLoginResModel" OnValidSubmit="@OnAuthenticateUserButtonClick">
                <Card Class="mt-3">
                    <CardHeader>
                        <div class="text-center">
                            <h1 class="h3 font-weight-normal">Login</h1>
                        </div>
                    </CardHeader>
                    <CardBody>

                        <DataAnnotationsValidator />



                        <div class="form-label-group mb-2">
                            <label for="inputUserName">User Name</label>
                            <InputText id="inputUserName" @bind-Value="@ClientLoginResModel.UserName" Class="form-control" />

                            <ValidationMessage For="@(() => ClientLoginResModel.UserName)" Class="lead" />


                        </div>

                        <div class="form-label-group mb-3">
                            <label for="inputPassword">Password</label>
                            <InputText id="inputPassword" @bind-Value="@ClientLoginResModel.Password" Class="form-control" type="password" />
                            <ValidationMessage For="@(() => ClientLoginResModel.Password)" />
                        </div>

                    </CardBody>
                    <CardFooter>
                        <div class="form-label-group text-center">
                            <button class="btn btn-primary  mr-2" type="submit">
                                <Icon Class="pr-1" Name="@("fas fa-sign-in-alt")" />    Login
                            </button>

                            <button class="btn btn-secondary" type="button" @onclick="@(async () => await OnRegisterUserButtonClick())">
                                <Icon Class="pr-1" Name="@("fas fa-user-plus")" />    Register
                            </button>
                        </div>
                    </CardFooter>
                </Card>
            </EditForm>
        </div>
        <div class="col-md-4">

        </div>
    </div>






    <Modal @ref="LoginFailedModel" Class="loginFailedModel" Style="">
        <ModalBackdrop />
        <ModalContent IsCentered="true">
            <ModalHeader>
                <ModalTitle>Login Failed</ModalTitle>
                <CloseButton Clicked="@HideLoginFailedModel" />
            </ModalHeader>
            <ModalBody>
                <span>User Name or Password is in-correct. Please try again.</span>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideLoginFailedModel">Close</Button>
            </ModalFooter>
        </ModalContent>
    </Modal>

</div>